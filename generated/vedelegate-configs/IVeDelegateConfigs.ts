// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ConfigUpdated extends ethereum.Event {
  get params(): ConfigUpdated__Params {
    return new ConfigUpdated__Params(this);
  }
}

export class ConfigUpdated__Params {
  _event: ConfigUpdated;

  constructor(event: ConfigUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get configId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IVeDelegateConfigs extends ethereum.SmartContract {
  static bind(address: Address): IVeDelegateConfigs {
    return new IVeDelegateConfigs("IVeDelegateConfigs", address);
  }

  getValues(user: Address, ids: Array<string>): Array<BigInt> {
    let result = super.call(
      "getValues",
      "getValues(address,string[]):(uint256[])",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromStringArray(ids)],
    );

    return result[0].toBigIntArray();
  }

  try_getValues(
    user: Address,
    ids: Array<string>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getValues",
      "getValues(address,string[]):(uint256[])",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromStringArray(ids)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class SetValuesCall extends ethereum.Call {
  get inputs(): SetValuesCall__Inputs {
    return new SetValuesCall__Inputs(this);
  }

  get outputs(): SetValuesCall__Outputs {
    return new SetValuesCall__Outputs(this);
  }
}

export class SetValuesCall__Inputs {
  _call: SetValuesCall;

  constructor(call: SetValuesCall) {
    this._call = call;
  }

  get ids(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetValuesCall__Outputs {
  _call: SetValuesCall;

  constructor(call: SetValuesCall) {
    this._call = call;
  }
}
