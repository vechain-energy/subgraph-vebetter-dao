// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CheckToggled extends ethereum.Event {
  get params(): CheckToggled__Params {
    return new CheckToggled__Params(this);
  }
}

export class CheckToggled__Params {
  _event: CheckToggled;

  constructor(event: CheckToggled) {
    this._event = event;
  }

  get checkName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class DelegationCreated extends ethereum.Event {
  get params(): DelegationCreated__Params {
    return new DelegationCreated__Params(this);
  }
}

export class DelegationCreated__Params {
  _event: DelegationCreated;

  constructor(event: DelegationCreated) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DelegationPending extends ethereum.Event {
  get params(): DelegationPending__Params {
    return new DelegationPending__Params(this);
  }
}

export class DelegationPending__Params {
  _event: DelegationPending;

  constructor(event: DelegationPending) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DelegationRevoked extends ethereum.Event {
  get params(): DelegationRevoked__Params {
    return new DelegationRevoked__Params(this);
  }
}

export class DelegationRevoked__Params {
  _event: DelegationRevoked;

  constructor(event: DelegationRevoked) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LinkCreated extends ethereum.Event {
  get params(): LinkCreated__Params {
    return new LinkCreated__Params(this);
  }
}

export class LinkCreated__Params {
  _event: LinkCreated;

  constructor(event: LinkCreated) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get passport(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LinkPending extends ethereum.Event {
  get params(): LinkPending__Params {
    return new LinkPending__Params(this);
  }
}

export class LinkPending__Params {
  _event: LinkPending;

  constructor(event: LinkPending) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get passport(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LinkRemoved extends ethereum.Event {
  get params(): LinkRemoved__Params {
    return new LinkRemoved__Params(this);
  }
}

export class LinkRemoved__Params {
  _event: LinkRemoved;

  constructor(event: LinkRemoved) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get passport(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MinimumGalaxyMemberLevelSet extends ethereum.Event {
  get params(): MinimumGalaxyMemberLevelSet__Params {
    return new MinimumGalaxyMemberLevelSet__Params(this);
  }
}

export class MinimumGalaxyMemberLevelSet__Params {
  _event: MinimumGalaxyMemberLevelSet;

  constructor(event: MinimumGalaxyMemberLevelSet) {
    this._event = event;
  }

  get minimumGalaxyMemberLevel(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RegisteredAction extends ethereum.Event {
  get params(): RegisteredAction__Params {
    return new RegisteredAction__Params(this);
  }
}

export class RegisteredAction__Params {
  _event: RegisteredAction;

  constructor(event: RegisteredAction) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get passport(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get appId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get round(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get actionScore(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemovedUserFromBlacklist extends ethereum.Event {
  get params(): RemovedUserFromBlacklist__Params {
    return new RemovedUserFromBlacklist__Params(this);
  }
}

export class RemovedUserFromBlacklist__Params {
  _event: RemovedUserFromBlacklist;

  constructor(event: RemovedUserFromBlacklist) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedUserFromWhitelist extends ethereum.Event {
  get params(): RemovedUserFromWhitelist__Params {
    return new RemovedUserFromWhitelist__Params(this);
  }
}

export class RemovedUserFromWhitelist__Params {
  _event: RemovedUserFromWhitelist;

  constructor(event: RemovedUserFromWhitelist) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get passport(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SignalerAssignedToApp extends ethereum.Event {
  get params(): SignalerAssignedToApp__Params {
    return new SignalerAssignedToApp__Params(this);
  }
}

export class SignalerAssignedToApp__Params {
  _event: SignalerAssignedToApp;

  constructor(event: SignalerAssignedToApp) {
    this._event = event;
  }

  get signaler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get app(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SignalerRemovedFromApp extends ethereum.Event {
  get params(): SignalerRemovedFromApp__Params {
    return new SignalerRemovedFromApp__Params(this);
  }
}

export class SignalerRemovedFromApp__Params {
  _event: SignalerRemovedFromApp;

  constructor(event: SignalerRemovedFromApp) {
    this._event = event;
  }

  get signaler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get app(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserBlacklisted extends ethereum.Event {
  get params(): UserBlacklisted__Params {
    return new UserBlacklisted__Params(this);
  }
}

export class UserBlacklisted__Params {
  _event: UserBlacklisted;

  constructor(event: UserBlacklisted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blacklistedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserSignaled extends ethereum.Event {
  get params(): UserSignaled__Params {
    return new UserSignaled__Params(this);
  }
}

export class UserSignaled__Params {
  _event: UserSignaled;

  constructor(event: UserSignaled) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signaler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get app(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get reason(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class UserSignalsReset extends ethereum.Event {
  get params(): UserSignalsReset__Params {
    return new UserSignalsReset__Params(this);
  }
}

export class UserSignalsReset__Params {
  _event: UserSignalsReset;

  constructor(event: UserSignalsReset) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class UserSignalsResetForApp extends ethereum.Event {
  get params(): UserSignalsResetForApp__Params {
    return new UserSignalsResetForApp__Params(this);
  }
}

export class UserSignalsResetForApp__Params {
  _event: UserSignalsResetForApp;

  constructor(event: UserSignalsResetForApp) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get app(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class UserWhitelisted extends ethereum.Event {
  get params(): UserWhitelisted__Params {
    return new UserWhitelisted__Params(this);
  }
}

export class UserWhitelisted__Params {
  _event: UserWhitelisted;

  constructor(event: UserWhitelisted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get whitelistedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Passport__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getSignatureVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Passport__getPendingDelegationsResult {
  value0: Array<Address>;
  value1: Address;

  constructor(value0: Array<Address>, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getIncoming(): Array<Address> {
    return this.value0;
  }

  getOutgoing(): Address {
    return this.value1;
  }
}

export class Passport__getPendingLinkingsResult {
  value0: Array<Address>;
  value1: Address;

  constructor(value0: Array<Address>, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getIncoming(): Array<Address> {
    return this.value0;
  }

  getOutgoing(): Address {
    return this.value1;
  }
}

export class Passport__isPersonResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getPerson(): boolean {
    return this.value0;
  }

  getReason(): string {
    return this.value1;
  }
}

export class Passport__isPersonAtTimepointResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getPerson(): boolean {
    return this.value0;
  }

  getReason(): string {
    return this.value1;
  }
}

export class Passport extends ethereum.SmartContract {
  static bind(address: Address): Passport {
    return new Passport("Passport", address);
  }

  ACTION_REGISTRAR_ROLE(): Bytes {
    let result = super.call(
      "ACTION_REGISTRAR_ROLE",
      "ACTION_REGISTRAR_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_ACTION_REGISTRAR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ACTION_REGISTRAR_ROLE",
      "ACTION_REGISTRAR_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ACTION_SCORE_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "ACTION_SCORE_MANAGER_ROLE",
      "ACTION_SCORE_MANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_ACTION_SCORE_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ACTION_SCORE_MANAGER_ROLE",
      "ACTION_SCORE_MANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CLOCK_MODE(): string {
    let result = super.call("CLOCK_MODE", "CLOCK_MODE():(string)", []);

    return result[0].toString();
  }

  try_CLOCK_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("CLOCK_MODE", "CLOCK_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_GRANTER(): Bytes {
    let result = super.call("ROLE_GRANTER", "ROLE_GRANTER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROLE_GRANTER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ROLE_GRANTER", "ROLE_GRANTER():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SETTINGS_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "SETTINGS_MANAGER_ROLE",
      "SETTINGS_MANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SETTINGS_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SETTINGS_MANAGER_ROLE",
      "SETTINGS_MANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SIGNALER_ROLE(): Bytes {
    let result = super.call("SIGNALER_ROLE", "SIGNALER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SIGNALER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SIGNALER_ROLE",
      "SIGNALER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  WHITELISTER_ROLE(): Bytes {
    let result = super.call(
      "WHITELISTER_ROLE",
      "WHITELISTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_WHITELISTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "WHITELISTER_ROLE",
      "WHITELISTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  appOfSignaler(_signaler: Address): Bytes {
    let result = super.call(
      "appOfSignaler",
      "appOfSignaler(address):(bytes32)",
      [ethereum.Value.fromAddress(_signaler)],
    );

    return result[0].toBytes();
  }

  try_appOfSignaler(_signaler: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "appOfSignaler",
      "appOfSignaler(address):(bytes32)",
      [ethereum.Value.fromAddress(_signaler)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  appSecurity(appId: Bytes): i32 {
    let result = super.call("appSecurity", "appSecurity(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(appId),
    ]);

    return result[0].toI32();
  }

  try_appSecurity(appId: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall("appSecurity", "appSecurity(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(appId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  appSignalsCounter(_app: Bytes, _user: Address): BigInt {
    let result = super.call(
      "appSignalsCounter",
      "appSignalsCounter(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(_app), ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_appSignalsCounter(
    _app: Bytes,
    _user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "appSignalsCounter",
      "appSignalsCounter(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(_app), ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appTotalSignalsCounter(_app: Bytes): BigInt {
    let result = super.call(
      "appTotalSignalsCounter",
      "appTotalSignalsCounter(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_app)],
    );

    return result[0].toBigInt();
  }

  try_appTotalSignalsCounter(_app: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "appTotalSignalsCounter",
      "appTotalSignalsCounter(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_app)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklistThreshold(): BigInt {
    let result = super.call(
      "blacklistThreshold",
      "blacklistThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_blacklistThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blacklistThreshold",
      "blacklistThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clock(): BigInt {
    let result = super.call("clock", "clock():(uint48)", []);

    return result[0].toBigInt();
  }

  try_clock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("clock", "clock():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decayRate(): BigInt {
    let result = super.call("decayRate", "decayRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decayRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decayRate", "decayRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): Passport__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new Passport__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<Passport__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Passport__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  getCumulativeScoreWithDecay(user: Address, lastRound: BigInt): BigInt {
    let result = super.call(
      "getCumulativeScoreWithDecay",
      "getCumulativeScoreWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(lastRound),
      ],
    );

    return result[0].toBigInt();
  }

  try_getCumulativeScoreWithDecay(
    user: Address,
    lastRound: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCumulativeScoreWithDecay",
      "getCumulativeScoreWithDecay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(lastRound),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelegatee(delegator: Address): Address {
    let result = super.call("getDelegatee", "getDelegatee(address):(address)", [
      ethereum.Value.fromAddress(delegator),
    ]);

    return result[0].toAddress();
  }

  try_getDelegatee(delegator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegatee",
      "getDelegatee(address):(address)",
      [ethereum.Value.fromAddress(delegator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegateeInTimepoint(delegator: Address, timepoint: BigInt): Address {
    let result = super.call(
      "getDelegateeInTimepoint",
      "getDelegateeInTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toAddress();
  }

  try_getDelegateeInTimepoint(
    delegator: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegateeInTimepoint",
      "getDelegateeInTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegator(delegatee: Address): Address {
    let result = super.call("getDelegator", "getDelegator(address):(address)", [
      ethereum.Value.fromAddress(delegatee),
    ]);

    return result[0].toAddress();
  }

  try_getDelegator(delegatee: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegator",
      "getDelegator(address):(address)",
      [ethereum.Value.fromAddress(delegatee)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegatorInTimepoint(delegatee: Address, timepoint: BigInt): Address {
    let result = super.call(
      "getDelegatorInTimepoint",
      "getDelegatorInTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(delegatee),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toAddress();
  }

  try_getDelegatorInTimepoint(
    delegatee: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegatorInTimepoint",
      "getDelegatorInTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(delegatee),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEntitiesLinkedToPassport(passport: Address): Array<Address> {
    let result = super.call(
      "getEntitiesLinkedToPassport",
      "getEntitiesLinkedToPassport(address):(address[])",
      [ethereum.Value.fromAddress(passport)],
    );

    return result[0].toAddressArray();
  }

  try_getEntitiesLinkedToPassport(
    passport: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getEntitiesLinkedToPassport",
      "getEntitiesLinkedToPassport(address):(address[])",
      [ethereum.Value.fromAddress(passport)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getGalaxyMember(): Address {
    let result = super.call(
      "getGalaxyMember",
      "getGalaxyMember():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getGalaxyMember(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGalaxyMember",
      "getGalaxyMember():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMinimumGalaxyMemberLevel(): BigInt {
    let result = super.call(
      "getMinimumGalaxyMemberLevel",
      "getMinimumGalaxyMemberLevel():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMinimumGalaxyMemberLevel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumGalaxyMemberLevel",
      "getMinimumGalaxyMemberLevel():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPassportForEntity(entity: Address): Address {
    let result = super.call(
      "getPassportForEntity",
      "getPassportForEntity(address):(address)",
      [ethereum.Value.fromAddress(entity)],
    );

    return result[0].toAddress();
  }

  try_getPassportForEntity(entity: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPassportForEntity",
      "getPassportForEntity(address):(address)",
      [ethereum.Value.fromAddress(entity)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPassportForEntityAtTimepoint(entity: Address, timepoint: BigInt): Address {
    let result = super.call(
      "getPassportForEntityAtTimepoint",
      "getPassportForEntityAtTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(entity),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toAddress();
  }

  try_getPassportForEntityAtTimepoint(
    entity: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPassportForEntityAtTimepoint",
      "getPassportForEntityAtTimepoint(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(entity),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPendingDelegations(user: Address): Passport__getPendingDelegationsResult {
    let result = super.call(
      "getPendingDelegations",
      "getPendingDelegations(address):(address[],address)",
      [ethereum.Value.fromAddress(user)],
    );

    return new Passport__getPendingDelegationsResult(
      result[0].toAddressArray(),
      result[1].toAddress(),
    );
  }

  try_getPendingDelegations(
    user: Address,
  ): ethereum.CallResult<Passport__getPendingDelegationsResult> {
    let result = super.tryCall(
      "getPendingDelegations",
      "getPendingDelegations(address):(address[],address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Passport__getPendingDelegationsResult(
        value[0].toAddressArray(),
        value[1].toAddress(),
      ),
    );
  }

  getPendingLinkings(user: Address): Passport__getPendingLinkingsResult {
    let result = super.call(
      "getPendingLinkings",
      "getPendingLinkings(address):(address[],address)",
      [ethereum.Value.fromAddress(user)],
    );

    return new Passport__getPendingLinkingsResult(
      result[0].toAddressArray(),
      result[1].toAddress(),
    );
  }

  try_getPendingLinkings(
    user: Address,
  ): ethereum.CallResult<Passport__getPendingLinkingsResult> {
    let result = super.tryCall(
      "getPendingLinkings",
      "getPendingLinkings(address):(address[],address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Passport__getPendingLinkingsResult(
        value[0].toAddressArray(),
        value[1].toAddress(),
      ),
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getX2EarnApps(): Address {
    let result = super.call("getX2EarnApps", "getX2EarnApps():(address)", []);

    return result[0].toAddress();
  }

  try_getX2EarnApps(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getX2EarnApps",
      "getX2EarnApps():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getXAllocationVoting(): Address {
    let result = super.call(
      "getXAllocationVoting",
      "getXAllocationVoting():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getXAllocationVoting(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getXAllocationVoting",
      "getXAllocationVoting():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBlacklisted(_user: Address): boolean {
    let result = super.call("isBlacklisted", "isBlacklisted(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_isBlacklisted(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklisted",
      "isBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCheckEnabled(check: i32): boolean {
    let result = super.call("isCheckEnabled", "isCheckEnabled(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(check)),
    ]);

    return result[0].toBoolean();
  }

  try_isCheckEnabled(check: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCheckEnabled",
      "isCheckEnabled(uint8):(bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(check))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegatee(user: Address): boolean {
    let result = super.call("isDelegatee", "isDelegatee(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_isDelegatee(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDelegatee", "isDelegatee(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegateeInTimepoint(user: Address, timepoint: BigInt): boolean {
    let result = super.call(
      "isDelegateeInTimepoint",
      "isDelegateeInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toBoolean();
  }

  try_isDelegateeInTimepoint(
    user: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDelegateeInTimepoint",
      "isDelegateeInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegator(user: Address): boolean {
    let result = super.call("isDelegator", "isDelegator(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_isDelegator(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDelegator", "isDelegator(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegatorInTimepoint(user: Address, timepoint: BigInt): boolean {
    let result = super.call(
      "isDelegatorInTimepoint",
      "isDelegatorInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toBoolean();
  }

  try_isDelegatorInTimepoint(
    user: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDelegatorInTimepoint",
      "isDelegatorInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEntity(user: Address): boolean {
    let result = super.call("isEntity", "isEntity(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_isEntity(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEntity", "isEntity(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEntityInTimepoint(user: Address, timepoint: BigInt): boolean {
    let result = super.call(
      "isEntityInTimepoint",
      "isEntityInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toBoolean();
  }

  try_isEntityInTimepoint(
    user: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEntityInTimepoint",
      "isEntityInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPassport(user: Address): boolean {
    let result = super.call("isPassport", "isPassport(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_isPassport(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPassport", "isPassport(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPassportBlacklisted(passport: Address): boolean {
    let result = super.call(
      "isPassportBlacklisted",
      "isPassportBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(passport)],
    );

    return result[0].toBoolean();
  }

  try_isPassportBlacklisted(passport: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPassportBlacklisted",
      "isPassportBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(passport)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPassportInTimepoint(user: Address, timepoint: BigInt): boolean {
    let result = super.call(
      "isPassportInTimepoint",
      "isPassportInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toBoolean();
  }

  try_isPassportInTimepoint(
    user: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPassportInTimepoint",
      "isPassportInTimepoint(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPassportWhitelisted(passport: Address): boolean {
    let result = super.call(
      "isPassportWhitelisted",
      "isPassportWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(passport)],
    );

    return result[0].toBoolean();
  }

  try_isPassportWhitelisted(passport: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPassportWhitelisted",
      "isPassportWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(passport)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPerson(user: Address): Passport__isPersonResult {
    let result = super.call("isPerson", "isPerson(address):(bool,string)", [
      ethereum.Value.fromAddress(user),
    ]);

    return new Passport__isPersonResult(
      result[0].toBoolean(),
      result[1].toString(),
    );
  }

  try_isPerson(user: Address): ethereum.CallResult<Passport__isPersonResult> {
    let result = super.tryCall("isPerson", "isPerson(address):(bool,string)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Passport__isPersonResult(value[0].toBoolean(), value[1].toString()),
    );
  }

  isPersonAtTimepoint(
    user: Address,
    timepoint: BigInt,
  ): Passport__isPersonAtTimepointResult {
    let result = super.call(
      "isPersonAtTimepoint",
      "isPersonAtTimepoint(address,uint48):(bool,string)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return new Passport__isPersonAtTimepointResult(
      result[0].toBoolean(),
      result[1].toString(),
    );
  }

  try_isPersonAtTimepoint(
    user: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<Passport__isPersonAtTimepointResult> {
    let result = super.tryCall(
      "isPersonAtTimepoint",
      "isPersonAtTimepoint(address,uint48):(bool,string)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Passport__isPersonAtTimepointResult(
        value[0].toBoolean(),
        value[1].toString(),
      ),
    );
  }

  isWhitelisted(_user: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxEntitiesPerPassport(): BigInt {
    let result = super.call(
      "maxEntitiesPerPassport",
      "maxEntitiesPerPassport():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxEntitiesPerPassport(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxEntitiesPerPassport",
      "maxEntitiesPerPassport():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumGalaxyMemberLevel(): BigInt {
    let result = super.call(
      "minimumGalaxyMemberLevel",
      "minimumGalaxyMemberLevel():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minimumGalaxyMemberLevel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumGalaxyMemberLevel",
      "minimumGalaxyMemberLevel():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  roundsForCumulativeScore(): BigInt {
    let result = super.call(
      "roundsForCumulativeScore",
      "roundsForCumulativeScore():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_roundsForCumulativeScore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundsForCumulativeScore",
      "roundsForCumulativeScore():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  securityMultiplier(security: i32): BigInt {
    let result = super.call(
      "securityMultiplier",
      "securityMultiplier(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(security))],
    );

    return result[0].toBigInt();
  }

  try_securityMultiplier(security: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "securityMultiplier",
      "securityMultiplier(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(security))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signaledCounter(_user: Address): BigInt {
    let result = super.call(
      "signaledCounter",
      "signaledCounter(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_signaledCounter(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signaledCounter",
      "signaledCounter(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signalingThreshold(): BigInt {
    let result = super.call(
      "signalingThreshold",
      "signalingThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_signalingThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signalingThreshold",
      "signalingThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  thresholdPoPScore(): BigInt {
    let result = super.call(
      "thresholdPoPScore",
      "thresholdPoPScore():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_thresholdPoPScore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "thresholdPoPScore",
      "thresholdPoPScore():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  thresholdPoPScoreAtTimepoint(timepoint: BigInt): BigInt {
    let result = super.call(
      "thresholdPoPScoreAtTimepoint",
      "thresholdPoPScoreAtTimepoint(uint48):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );

    return result[0].toBigInt();
  }

  try_thresholdPoPScoreAtTimepoint(
    timepoint: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "thresholdPoPScoreAtTimepoint",
      "thresholdPoPScoreAtTimepoint(uint48):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userAppTotalScore(user: Address, appId: Bytes): BigInt {
    let result = super.call(
      "userAppTotalScore",
      "userAppTotalScore(address,bytes32):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromFixedBytes(appId)],
    );

    return result[0].toBigInt();
  }

  try_userAppTotalScore(
    user: Address,
    appId: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userAppTotalScore",
      "userAppTotalScore(address,bytes32):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromFixedBytes(appId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRoundScore(user: Address, round: BigInt): BigInt {
    let result = super.call(
      "userRoundScore",
      "userRoundScore(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(round),
      ],
    );

    return result[0].toBigInt();
  }

  try_userRoundScore(
    user: Address,
    round: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRoundScore",
      "userRoundScore(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(round),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRoundScoreApp(user: Address, round: BigInt, appId: Bytes): BigInt {
    let result = super.call(
      "userRoundScoreApp",
      "userRoundScoreApp(address,uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(round),
        ethereum.Value.fromFixedBytes(appId),
      ],
    );

    return result[0].toBigInt();
  }

  try_userRoundScoreApp(
    user: Address,
    round: BigInt,
    appId: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRoundScoreApp",
      "userRoundScoreApp(address,uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(round),
        ethereum.Value.fromFixedBytes(appId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTotalScore(user: Address): BigInt {
    let result = super.call(
      "userTotalScore",
      "userTotalScore(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_userTotalScore(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTotalScore",
      "userTotalScore(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whitelistThreshold(): BigInt {
    let result = super.call(
      "whitelistThreshold",
      "whitelistThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_whitelistThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "whitelistThreshold",
      "whitelistThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptDelegationCall extends ethereum.Call {
  get inputs(): AcceptDelegationCall__Inputs {
    return new AcceptDelegationCall__Inputs(this);
  }

  get outputs(): AcceptDelegationCall__Outputs {
    return new AcceptDelegationCall__Outputs(this);
  }
}

export class AcceptDelegationCall__Inputs {
  _call: AcceptDelegationCall;

  constructor(call: AcceptDelegationCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptDelegationCall__Outputs {
  _call: AcceptDelegationCall;

  constructor(call: AcceptDelegationCall) {
    this._call = call;
  }
}

export class AcceptEntityLinkCall extends ethereum.Call {
  get inputs(): AcceptEntityLinkCall__Inputs {
    return new AcceptEntityLinkCall__Inputs(this);
  }

  get outputs(): AcceptEntityLinkCall__Outputs {
    return new AcceptEntityLinkCall__Outputs(this);
  }
}

export class AcceptEntityLinkCall__Inputs {
  _call: AcceptEntityLinkCall;

  constructor(call: AcceptEntityLinkCall) {
    this._call = call;
  }

  get entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptEntityLinkCall__Outputs {
  _call: AcceptEntityLinkCall;

  constructor(call: AcceptEntityLinkCall) {
    this._call = call;
  }
}

export class AssignSignalerToAppCall extends ethereum.Call {
  get inputs(): AssignSignalerToAppCall__Inputs {
    return new AssignSignalerToAppCall__Inputs(this);
  }

  get outputs(): AssignSignalerToAppCall__Outputs {
    return new AssignSignalerToAppCall__Outputs(this);
  }
}

export class AssignSignalerToAppCall__Inputs {
  _call: AssignSignalerToAppCall;

  constructor(call: AssignSignalerToAppCall) {
    this._call = call;
  }

  get app(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssignSignalerToAppCall__Outputs {
  _call: AssignSignalerToAppCall;

  constructor(call: AssignSignalerToAppCall) {
    this._call = call;
  }
}

export class AssignSignalerToAppByAppAdminCall extends ethereum.Call {
  get inputs(): AssignSignalerToAppByAppAdminCall__Inputs {
    return new AssignSignalerToAppByAppAdminCall__Inputs(this);
  }

  get outputs(): AssignSignalerToAppByAppAdminCall__Outputs {
    return new AssignSignalerToAppByAppAdminCall__Outputs(this);
  }
}

export class AssignSignalerToAppByAppAdminCall__Inputs {
  _call: AssignSignalerToAppByAppAdminCall;

  constructor(call: AssignSignalerToAppByAppAdminCall) {
    this._call = call;
  }

  get app(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssignSignalerToAppByAppAdminCall__Outputs {
  _call: AssignSignalerToAppByAppAdminCall;

  constructor(call: AssignSignalerToAppByAppAdminCall) {
    this._call = call;
  }
}

export class BlacklistCall extends ethereum.Call {
  get inputs(): BlacklistCall__Inputs {
    return new BlacklistCall__Inputs(this);
  }

  get outputs(): BlacklistCall__Outputs {
    return new BlacklistCall__Outputs(this);
  }
}

export class BlacklistCall__Inputs {
  _call: BlacklistCall;

  constructor(call: BlacklistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BlacklistCall__Outputs {
  _call: BlacklistCall;

  constructor(call: BlacklistCall) {
    this._call = call;
  }
}

export class CancelOutgoingPendingDelegationCall extends ethereum.Call {
  get inputs(): CancelOutgoingPendingDelegationCall__Inputs {
    return new CancelOutgoingPendingDelegationCall__Inputs(this);
  }

  get outputs(): CancelOutgoingPendingDelegationCall__Outputs {
    return new CancelOutgoingPendingDelegationCall__Outputs(this);
  }
}

export class CancelOutgoingPendingDelegationCall__Inputs {
  _call: CancelOutgoingPendingDelegationCall;

  constructor(call: CancelOutgoingPendingDelegationCall) {
    this._call = call;
  }
}

export class CancelOutgoingPendingDelegationCall__Outputs {
  _call: CancelOutgoingPendingDelegationCall;

  constructor(call: CancelOutgoingPendingDelegationCall) {
    this._call = call;
  }
}

export class CancelOutgoingPendingEntityLinkCall extends ethereum.Call {
  get inputs(): CancelOutgoingPendingEntityLinkCall__Inputs {
    return new CancelOutgoingPendingEntityLinkCall__Inputs(this);
  }

  get outputs(): CancelOutgoingPendingEntityLinkCall__Outputs {
    return new CancelOutgoingPendingEntityLinkCall__Outputs(this);
  }
}

export class CancelOutgoingPendingEntityLinkCall__Inputs {
  _call: CancelOutgoingPendingEntityLinkCall;

  constructor(call: CancelOutgoingPendingEntityLinkCall) {
    this._call = call;
  }
}

export class CancelOutgoingPendingEntityLinkCall__Outputs {
  _call: CancelOutgoingPendingEntityLinkCall;

  constructor(call: CancelOutgoingPendingEntityLinkCall) {
    this._call = call;
  }
}

export class DelegatePassportCall extends ethereum.Call {
  get inputs(): DelegatePassportCall__Inputs {
    return new DelegatePassportCall__Inputs(this);
  }

  get outputs(): DelegatePassportCall__Outputs {
    return new DelegatePassportCall__Outputs(this);
  }
}

export class DelegatePassportCall__Inputs {
  _call: DelegatePassportCall;

  constructor(call: DelegatePassportCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegatePassportCall__Outputs {
  _call: DelegatePassportCall;

  constructor(call: DelegatePassportCall) {
    this._call = call;
  }
}

export class DelegateWithSignatureCall extends ethereum.Call {
  get inputs(): DelegateWithSignatureCall__Inputs {
    return new DelegateWithSignatureCall__Inputs(this);
  }

  get outputs(): DelegateWithSignatureCall__Outputs {
    return new DelegateWithSignatureCall__Outputs(this);
  }
}

export class DelegateWithSignatureCall__Inputs {
  _call: DelegateWithSignatureCall;

  constructor(call: DelegateWithSignatureCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DelegateWithSignatureCall__Outputs {
  _call: DelegateWithSignatureCall;

  constructor(call: DelegateWithSignatureCall) {
    this._call = call;
  }
}

export class DenyIncomingPendingDelegationCall extends ethereum.Call {
  get inputs(): DenyIncomingPendingDelegationCall__Inputs {
    return new DenyIncomingPendingDelegationCall__Inputs(this);
  }

  get outputs(): DenyIncomingPendingDelegationCall__Outputs {
    return new DenyIncomingPendingDelegationCall__Outputs(this);
  }
}

export class DenyIncomingPendingDelegationCall__Inputs {
  _call: DenyIncomingPendingDelegationCall;

  constructor(call: DenyIncomingPendingDelegationCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyIncomingPendingDelegationCall__Outputs {
  _call: DenyIncomingPendingDelegationCall;

  constructor(call: DenyIncomingPendingDelegationCall) {
    this._call = call;
  }
}

export class DenyIncomingPendingEntityLinkCall extends ethereum.Call {
  get inputs(): DenyIncomingPendingEntityLinkCall__Inputs {
    return new DenyIncomingPendingEntityLinkCall__Inputs(this);
  }

  get outputs(): DenyIncomingPendingEntityLinkCall__Outputs {
    return new DenyIncomingPendingEntityLinkCall__Outputs(this);
  }
}

export class DenyIncomingPendingEntityLinkCall__Inputs {
  _call: DenyIncomingPendingEntityLinkCall;

  constructor(call: DenyIncomingPendingEntityLinkCall) {
    this._call = call;
  }

  get entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyIncomingPendingEntityLinkCall__Outputs {
  _call: DenyIncomingPendingEntityLinkCall;

  constructor(call: DenyIncomingPendingEntityLinkCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get data(): InitializeCallDataStruct {
    return changetype<InitializeCallDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get roles(): InitializeCallRolesStruct {
    return changetype<InitializeCallRolesStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallDataStruct extends ethereum.Tuple {
  get xAllocationVoting(): Address {
    return this[0].toAddress();
  }

  get x2EarnApps(): Address {
    return this[1].toAddress();
  }

  get galaxyMember(): Address {
    return this[2].toAddress();
  }

  get signalingThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get roundsForCumulativeScore(): BigInt {
    return this[4].toBigInt();
  }

  get minimumGalaxyMemberLevel(): BigInt {
    return this[5].toBigInt();
  }

  get blacklistThreshold(): BigInt {
    return this[6].toBigInt();
  }

  get whitelistThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get maxEntitiesPerPassport(): BigInt {
    return this[8].toBigInt();
  }

  get decayRate(): BigInt {
    return this[9].toBigInt();
  }
}

export class InitializeCallRolesStruct extends ethereum.Tuple {
  get admin(): Address {
    return this[0].toAddress();
  }

  get botSignaler(): Address {
    return this[1].toAddress();
  }

  get upgrader(): Address {
    return this[2].toAddress();
  }

  get settingsManager(): Address {
    return this[3].toAddress();
  }

  get roleGranter(): Address {
    return this[4].toAddress();
  }

  get blacklister(): Address {
    return this[5].toAddress();
  }

  get whitelister(): Address {
    return this[6].toAddress();
  }

  get actionRegistrar(): Address {
    return this[7].toAddress();
  }

  get actionScoreManager(): Address {
    return this[8].toAddress();
  }
}

export class LinkEntityToPassportCall extends ethereum.Call {
  get inputs(): LinkEntityToPassportCall__Inputs {
    return new LinkEntityToPassportCall__Inputs(this);
  }

  get outputs(): LinkEntityToPassportCall__Outputs {
    return new LinkEntityToPassportCall__Outputs(this);
  }
}

export class LinkEntityToPassportCall__Inputs {
  _call: LinkEntityToPassportCall;

  constructor(call: LinkEntityToPassportCall) {
    this._call = call;
  }

  get passport(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LinkEntityToPassportCall__Outputs {
  _call: LinkEntityToPassportCall;

  constructor(call: LinkEntityToPassportCall) {
    this._call = call;
  }
}

export class LinkEntityToPassportWithSignatureCall extends ethereum.Call {
  get inputs(): LinkEntityToPassportWithSignatureCall__Inputs {
    return new LinkEntityToPassportWithSignatureCall__Inputs(this);
  }

  get outputs(): LinkEntityToPassportWithSignatureCall__Outputs {
    return new LinkEntityToPassportWithSignatureCall__Outputs(this);
  }
}

export class LinkEntityToPassportWithSignatureCall__Inputs {
  _call: LinkEntityToPassportWithSignatureCall;

  constructor(call: LinkEntityToPassportWithSignatureCall) {
    this._call = call;
  }

  get entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class LinkEntityToPassportWithSignatureCall__Outputs {
  _call: LinkEntityToPassportWithSignatureCall;

  constructor(call: LinkEntityToPassportWithSignatureCall) {
    this._call = call;
  }
}

export class RegisterActionCall extends ethereum.Call {
  get inputs(): RegisterActionCall__Inputs {
    return new RegisterActionCall__Inputs(this);
  }

  get outputs(): RegisterActionCall__Outputs {
    return new RegisterActionCall__Outputs(this);
  }
}

export class RegisterActionCall__Inputs {
  _call: RegisterActionCall;

  constructor(call: RegisterActionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RegisterActionCall__Outputs {
  _call: RegisterActionCall;

  constructor(call: RegisterActionCall) {
    this._call = call;
  }
}

export class RegisterActionForRoundCall extends ethereum.Call {
  get inputs(): RegisterActionForRoundCall__Inputs {
    return new RegisterActionForRoundCall__Inputs(this);
  }

  get outputs(): RegisterActionForRoundCall__Outputs {
    return new RegisterActionForRoundCall__Outputs(this);
  }
}

export class RegisterActionForRoundCall__Inputs {
  _call: RegisterActionForRoundCall;

  constructor(call: RegisterActionForRoundCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get round(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterActionForRoundCall__Outputs {
  _call: RegisterActionForRoundCall;

  constructor(call: RegisterActionForRoundCall) {
    this._call = call;
  }
}

export class RegisterAggregatedActionsForRoundCall extends ethereum.Call {
  get inputs(): RegisterAggregatedActionsForRoundCall__Inputs {
    return new RegisterAggregatedActionsForRoundCall__Inputs(this);
  }

  get outputs(): RegisterAggregatedActionsForRoundCall__Outputs {
    return new RegisterAggregatedActionsForRoundCall__Outputs(this);
  }
}

export class RegisterAggregatedActionsForRoundCall__Inputs {
  _call: RegisterAggregatedActionsForRoundCall;

  constructor(call: RegisterAggregatedActionsForRoundCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get appId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get round(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalScore(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RegisterAggregatedActionsForRoundCall__Outputs {
  _call: RegisterAggregatedActionsForRoundCall;

  constructor(call: RegisterAggregatedActionsForRoundCall) {
    this._call = call;
  }
}

export class RemoveEntityLinkCall extends ethereum.Call {
  get inputs(): RemoveEntityLinkCall__Inputs {
    return new RemoveEntityLinkCall__Inputs(this);
  }

  get outputs(): RemoveEntityLinkCall__Outputs {
    return new RemoveEntityLinkCall__Outputs(this);
  }
}

export class RemoveEntityLinkCall__Inputs {
  _call: RemoveEntityLinkCall;

  constructor(call: RemoveEntityLinkCall) {
    this._call = call;
  }

  get entity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveEntityLinkCall__Outputs {
  _call: RemoveEntityLinkCall;

  constructor(call: RemoveEntityLinkCall) {
    this._call = call;
  }
}

export class RemoveFromBlacklistCall extends ethereum.Call {
  get inputs(): RemoveFromBlacklistCall__Inputs {
    return new RemoveFromBlacklistCall__Inputs(this);
  }

  get outputs(): RemoveFromBlacklistCall__Outputs {
    return new RemoveFromBlacklistCall__Outputs(this);
  }
}

export class RemoveFromBlacklistCall__Inputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromBlacklistCall__Outputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }
}

export class RemoveFromWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromWhitelistCall__Inputs {
    return new RemoveFromWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromWhitelistCall__Outputs {
    return new RemoveFromWhitelistCall__Outputs(this);
  }
}

export class RemoveFromWhitelistCall__Inputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromWhitelistCall__Outputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }
}

export class RemoveSignalerFromAppCall extends ethereum.Call {
  get inputs(): RemoveSignalerFromAppCall__Inputs {
    return new RemoveSignalerFromAppCall__Inputs(this);
  }

  get outputs(): RemoveSignalerFromAppCall__Outputs {
    return new RemoveSignalerFromAppCall__Outputs(this);
  }
}

export class RemoveSignalerFromAppCall__Inputs {
  _call: RemoveSignalerFromAppCall;

  constructor(call: RemoveSignalerFromAppCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveSignalerFromAppCall__Outputs {
  _call: RemoveSignalerFromAppCall;

  constructor(call: RemoveSignalerFromAppCall) {
    this._call = call;
  }
}

export class RemoveSignalerFromAppByAppAdminCall extends ethereum.Call {
  get inputs(): RemoveSignalerFromAppByAppAdminCall__Inputs {
    return new RemoveSignalerFromAppByAppAdminCall__Inputs(this);
  }

  get outputs(): RemoveSignalerFromAppByAppAdminCall__Outputs {
    return new RemoveSignalerFromAppByAppAdminCall__Outputs(this);
  }
}

export class RemoveSignalerFromAppByAppAdminCall__Inputs {
  _call: RemoveSignalerFromAppByAppAdminCall;

  constructor(call: RemoveSignalerFromAppByAppAdminCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveSignalerFromAppByAppAdminCall__Outputs {
  _call: RemoveSignalerFromAppByAppAdminCall;

  constructor(call: RemoveSignalerFromAppByAppAdminCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class ResetUserSignalsByAppAdminWithReasonCall extends ethereum.Call {
  get inputs(): ResetUserSignalsByAppAdminWithReasonCall__Inputs {
    return new ResetUserSignalsByAppAdminWithReasonCall__Inputs(this);
  }

  get outputs(): ResetUserSignalsByAppAdminWithReasonCall__Outputs {
    return new ResetUserSignalsByAppAdminWithReasonCall__Outputs(this);
  }
}

export class ResetUserSignalsByAppAdminWithReasonCall__Inputs {
  _call: ResetUserSignalsByAppAdminWithReasonCall;

  constructor(call: ResetUserSignalsByAppAdminWithReasonCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ResetUserSignalsByAppAdminWithReasonCall__Outputs {
  _call: ResetUserSignalsByAppAdminWithReasonCall;

  constructor(call: ResetUserSignalsByAppAdminWithReasonCall) {
    this._call = call;
  }
}

export class ResetUserSignalsWithReasonCall extends ethereum.Call {
  get inputs(): ResetUserSignalsWithReasonCall__Inputs {
    return new ResetUserSignalsWithReasonCall__Inputs(this);
  }

  get outputs(): ResetUserSignalsWithReasonCall__Outputs {
    return new ResetUserSignalsWithReasonCall__Outputs(this);
  }
}

export class ResetUserSignalsWithReasonCall__Inputs {
  _call: ResetUserSignalsWithReasonCall;

  constructor(call: ResetUserSignalsWithReasonCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ResetUserSignalsWithReasonCall__Outputs {
  _call: ResetUserSignalsWithReasonCall;

  constructor(call: ResetUserSignalsWithReasonCall) {
    this._call = call;
  }
}

export class RevokeDelegationCall extends ethereum.Call {
  get inputs(): RevokeDelegationCall__Inputs {
    return new RevokeDelegationCall__Inputs(this);
  }

  get outputs(): RevokeDelegationCall__Outputs {
    return new RevokeDelegationCall__Outputs(this);
  }
}

export class RevokeDelegationCall__Inputs {
  _call: RevokeDelegationCall;

  constructor(call: RevokeDelegationCall) {
    this._call = call;
  }
}

export class RevokeDelegationCall__Outputs {
  _call: RevokeDelegationCall;

  constructor(call: RevokeDelegationCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAppSecurityCall extends ethereum.Call {
  get inputs(): SetAppSecurityCall__Inputs {
    return new SetAppSecurityCall__Inputs(this);
  }

  get outputs(): SetAppSecurityCall__Outputs {
    return new SetAppSecurityCall__Outputs(this);
  }
}

export class SetAppSecurityCall__Inputs {
  _call: SetAppSecurityCall;

  constructor(call: SetAppSecurityCall) {
    this._call = call;
  }

  get appId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get security(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetAppSecurityCall__Outputs {
  _call: SetAppSecurityCall;

  constructor(call: SetAppSecurityCall) {
    this._call = call;
  }
}

export class SetBlacklistThresholdCall extends ethereum.Call {
  get inputs(): SetBlacklistThresholdCall__Inputs {
    return new SetBlacklistThresholdCall__Inputs(this);
  }

  get outputs(): SetBlacklistThresholdCall__Outputs {
    return new SetBlacklistThresholdCall__Outputs(this);
  }
}

export class SetBlacklistThresholdCall__Inputs {
  _call: SetBlacklistThresholdCall;

  constructor(call: SetBlacklistThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBlacklistThresholdCall__Outputs {
  _call: SetBlacklistThresholdCall;

  constructor(call: SetBlacklistThresholdCall) {
    this._call = call;
  }
}

export class SetDecayRateCall extends ethereum.Call {
  get inputs(): SetDecayRateCall__Inputs {
    return new SetDecayRateCall__Inputs(this);
  }

  get outputs(): SetDecayRateCall__Outputs {
    return new SetDecayRateCall__Outputs(this);
  }
}

export class SetDecayRateCall__Inputs {
  _call: SetDecayRateCall;

  constructor(call: SetDecayRateCall) {
    this._call = call;
  }

  get _decayRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDecayRateCall__Outputs {
  _call: SetDecayRateCall;

  constructor(call: SetDecayRateCall) {
    this._call = call;
  }
}

export class SetGalaxyMemberCall extends ethereum.Call {
  get inputs(): SetGalaxyMemberCall__Inputs {
    return new SetGalaxyMemberCall__Inputs(this);
  }

  get outputs(): SetGalaxyMemberCall__Outputs {
    return new SetGalaxyMemberCall__Outputs(this);
  }
}

export class SetGalaxyMemberCall__Inputs {
  _call: SetGalaxyMemberCall;

  constructor(call: SetGalaxyMemberCall) {
    this._call = call;
  }

  get galaxyMember(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGalaxyMemberCall__Outputs {
  _call: SetGalaxyMemberCall;

  constructor(call: SetGalaxyMemberCall) {
    this._call = call;
  }
}

export class SetMaxEntitiesPerPassportCall extends ethereum.Call {
  get inputs(): SetMaxEntitiesPerPassportCall__Inputs {
    return new SetMaxEntitiesPerPassportCall__Inputs(this);
  }

  get outputs(): SetMaxEntitiesPerPassportCall__Outputs {
    return new SetMaxEntitiesPerPassportCall__Outputs(this);
  }
}

export class SetMaxEntitiesPerPassportCall__Inputs {
  _call: SetMaxEntitiesPerPassportCall;

  constructor(call: SetMaxEntitiesPerPassportCall) {
    this._call = call;
  }

  get maxEntities(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxEntitiesPerPassportCall__Outputs {
  _call: SetMaxEntitiesPerPassportCall;

  constructor(call: SetMaxEntitiesPerPassportCall) {
    this._call = call;
  }
}

export class SetMinimumGalaxyMemberLevelCall extends ethereum.Call {
  get inputs(): SetMinimumGalaxyMemberLevelCall__Inputs {
    return new SetMinimumGalaxyMemberLevelCall__Inputs(this);
  }

  get outputs(): SetMinimumGalaxyMemberLevelCall__Outputs {
    return new SetMinimumGalaxyMemberLevelCall__Outputs(this);
  }
}

export class SetMinimumGalaxyMemberLevelCall__Inputs {
  _call: SetMinimumGalaxyMemberLevelCall;

  constructor(call: SetMinimumGalaxyMemberLevelCall) {
    this._call = call;
  }

  get _minimumGalaxyMemberLevel(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumGalaxyMemberLevelCall__Outputs {
  _call: SetMinimumGalaxyMemberLevelCall;

  constructor(call: SetMinimumGalaxyMemberLevelCall) {
    this._call = call;
  }
}

export class SetRoundsForCumulativeScoreCall extends ethereum.Call {
  get inputs(): SetRoundsForCumulativeScoreCall__Inputs {
    return new SetRoundsForCumulativeScoreCall__Inputs(this);
  }

  get outputs(): SetRoundsForCumulativeScoreCall__Outputs {
    return new SetRoundsForCumulativeScoreCall__Outputs(this);
  }
}

export class SetRoundsForCumulativeScoreCall__Inputs {
  _call: SetRoundsForCumulativeScoreCall;

  constructor(call: SetRoundsForCumulativeScoreCall) {
    this._call = call;
  }

  get rounds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRoundsForCumulativeScoreCall__Outputs {
  _call: SetRoundsForCumulativeScoreCall;

  constructor(call: SetRoundsForCumulativeScoreCall) {
    this._call = call;
  }
}

export class SetSecurityMultiplierCall extends ethereum.Call {
  get inputs(): SetSecurityMultiplierCall__Inputs {
    return new SetSecurityMultiplierCall__Inputs(this);
  }

  get outputs(): SetSecurityMultiplierCall__Outputs {
    return new SetSecurityMultiplierCall__Outputs(this);
  }
}

export class SetSecurityMultiplierCall__Inputs {
  _call: SetSecurityMultiplierCall;

  constructor(call: SetSecurityMultiplierCall) {
    this._call = call;
  }

  get security(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get multiplier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSecurityMultiplierCall__Outputs {
  _call: SetSecurityMultiplierCall;

  constructor(call: SetSecurityMultiplierCall) {
    this._call = call;
  }
}

export class SetSignalingThresholdCall extends ethereum.Call {
  get inputs(): SetSignalingThresholdCall__Inputs {
    return new SetSignalingThresholdCall__Inputs(this);
  }

  get outputs(): SetSignalingThresholdCall__Outputs {
    return new SetSignalingThresholdCall__Outputs(this);
  }
}

export class SetSignalingThresholdCall__Inputs {
  _call: SetSignalingThresholdCall;

  constructor(call: SetSignalingThresholdCall) {
    this._call = call;
  }

  get threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSignalingThresholdCall__Outputs {
  _call: SetSignalingThresholdCall;

  constructor(call: SetSignalingThresholdCall) {
    this._call = call;
  }
}

export class SetThresholdPoPScoreCall extends ethereum.Call {
  get inputs(): SetThresholdPoPScoreCall__Inputs {
    return new SetThresholdPoPScoreCall__Inputs(this);
  }

  get outputs(): SetThresholdPoPScoreCall__Outputs {
    return new SetThresholdPoPScoreCall__Outputs(this);
  }
}

export class SetThresholdPoPScoreCall__Inputs {
  _call: SetThresholdPoPScoreCall;

  constructor(call: SetThresholdPoPScoreCall) {
    this._call = call;
  }

  get threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetThresholdPoPScoreCall__Outputs {
  _call: SetThresholdPoPScoreCall;

  constructor(call: SetThresholdPoPScoreCall) {
    this._call = call;
  }
}

export class SetWhitelistThresholdCall extends ethereum.Call {
  get inputs(): SetWhitelistThresholdCall__Inputs {
    return new SetWhitelistThresholdCall__Inputs(this);
  }

  get outputs(): SetWhitelistThresholdCall__Outputs {
    return new SetWhitelistThresholdCall__Outputs(this);
  }
}

export class SetWhitelistThresholdCall__Inputs {
  _call: SetWhitelistThresholdCall;

  constructor(call: SetWhitelistThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWhitelistThresholdCall__Outputs {
  _call: SetWhitelistThresholdCall;

  constructor(call: SetWhitelistThresholdCall) {
    this._call = call;
  }
}

export class SetX2EarnAppsCall extends ethereum.Call {
  get inputs(): SetX2EarnAppsCall__Inputs {
    return new SetX2EarnAppsCall__Inputs(this);
  }

  get outputs(): SetX2EarnAppsCall__Outputs {
    return new SetX2EarnAppsCall__Outputs(this);
  }
}

export class SetX2EarnAppsCall__Inputs {
  _call: SetX2EarnAppsCall;

  constructor(call: SetX2EarnAppsCall) {
    this._call = call;
  }

  get _x2EarnApps(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetX2EarnAppsCall__Outputs {
  _call: SetX2EarnAppsCall;

  constructor(call: SetX2EarnAppsCall) {
    this._call = call;
  }
}

export class SetXAllocationVotingCall extends ethereum.Call {
  get inputs(): SetXAllocationVotingCall__Inputs {
    return new SetXAllocationVotingCall__Inputs(this);
  }

  get outputs(): SetXAllocationVotingCall__Outputs {
    return new SetXAllocationVotingCall__Outputs(this);
  }
}

export class SetXAllocationVotingCall__Inputs {
  _call: SetXAllocationVotingCall;

  constructor(call: SetXAllocationVotingCall) {
    this._call = call;
  }

  get xAllocationVoting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetXAllocationVotingCall__Outputs {
  _call: SetXAllocationVotingCall;

  constructor(call: SetXAllocationVotingCall) {
    this._call = call;
  }
}

export class SignalUserCall extends ethereum.Call {
  get inputs(): SignalUserCall__Inputs {
    return new SignalUserCall__Inputs(this);
  }

  get outputs(): SignalUserCall__Outputs {
    return new SignalUserCall__Outputs(this);
  }
}

export class SignalUserCall__Inputs {
  _call: SignalUserCall;

  constructor(call: SignalUserCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SignalUserCall__Outputs {
  _call: SignalUserCall;

  constructor(call: SignalUserCall) {
    this._call = call;
  }
}

export class SignalUserWithReasonCall extends ethereum.Call {
  get inputs(): SignalUserWithReasonCall__Inputs {
    return new SignalUserWithReasonCall__Inputs(this);
  }

  get outputs(): SignalUserWithReasonCall__Outputs {
    return new SignalUserWithReasonCall__Outputs(this);
  }
}

export class SignalUserWithReasonCall__Inputs {
  _call: SignalUserWithReasonCall;

  constructor(call: SignalUserWithReasonCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SignalUserWithReasonCall__Outputs {
  _call: SignalUserWithReasonCall;

  constructor(call: SignalUserWithReasonCall) {
    this._call = call;
  }
}

export class ToggleCheckCall extends ethereum.Call {
  get inputs(): ToggleCheckCall__Inputs {
    return new ToggleCheckCall__Inputs(this);
  }

  get outputs(): ToggleCheckCall__Outputs {
    return new ToggleCheckCall__Outputs(this);
  }
}

export class ToggleCheckCall__Inputs {
  _call: ToggleCheckCall;

  constructor(call: ToggleCheckCall) {
    this._call = call;
  }

  get check(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ToggleCheckCall__Outputs {
  _call: ToggleCheckCall;

  constructor(call: ToggleCheckCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WhitelistCall extends ethereum.Call {
  get inputs(): WhitelistCall__Inputs {
    return new WhitelistCall__Inputs(this);
  }

  get outputs(): WhitelistCall__Outputs {
    return new WhitelistCall__Outputs(this);
  }
}

export class WhitelistCall__Inputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistCall__Outputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }
}
