// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllocationVoteCast extends ethereum.Event {
  get params(): AllocationVoteCast__Params {
    return new AllocationVoteCast__Params(this);
  }
}

export class AllocationVoteCast__Params {
  _event: AllocationVoteCast;

  constructor(event: AllocationVoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get appsIds(): Array<Bytes> {
    return this._event.parameters[2].value.toBytesArray();
  }

  get voteWeights(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class EmissionsSet extends ethereum.Event {
  get params(): EmissionsSet__Params {
    return new EmissionsSet__Params(this);
  }
}

export class EmissionsSet__Params {
  _event: EmissionsSet;

  constructor(event: EmissionsSet) {
    this._event = event;
  }

  get oldContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newContractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class QuorumNumeratorUpdated extends ethereum.Event {
  get params(): QuorumNumeratorUpdated__Params {
    return new QuorumNumeratorUpdated__Params(this);
  }
}

export class QuorumNumeratorUpdated__Params {
  _event: QuorumNumeratorUpdated;

  constructor(event: QuorumNumeratorUpdated) {
    this._event = event;
  }

  get oldQuorumNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newQuorumNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoundCreated extends ethereum.Event {
  get params(): RoundCreated__Params {
    return new RoundCreated__Params(this);
  }
}

export class RoundCreated__Params {
  _event: RoundCreated;

  constructor(event: RoundCreated) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get voteStart(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get voteEnd(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get appsIds(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoterRewardsSet extends ethereum.Event {
  get params(): VoterRewardsSet__Params {
    return new VoterRewardsSet__Params(this);
  }
}

export class VoterRewardsSet__Params {
  _event: VoterRewardsSet;

  constructor(event: VoterRewardsSet) {
    this._event = event;
  }

  get oldContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newContractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VotingPeriodSet extends ethereum.Event {
  get params(): VotingPeriodSet__Params {
    return new VotingPeriodSet__Params(this);
  }
}

export class VotingPeriodSet__Params {
  _event: VotingPeriodSet;

  constructor(event: VotingPeriodSet) {
    this._event = event;
  }

  get oldVotingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingThresholdSet extends ethereum.Event {
  get params(): VotingThresholdSet__Params {
    return new VotingThresholdSet__Params(this);
  }
}

export class VotingThresholdSet__Params {
  _event: VotingThresholdSet;

  constructor(event: VotingThresholdSet) {
    this._event = event;
  }

  get oldVotingThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class X2EarnAppsSet extends ethereum.Event {
  get params(): X2EarnAppsSet__Params {
    return new X2EarnAppsSet__Params(this);
  }
}

export class X2EarnAppsSet__Params {
  _event: X2EarnAppsSet;

  constructor(event: X2EarnAppsSet) {
    this._event = event;
  }

  get oldContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newContractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class XAllocationVoting__getAppsOfRoundResultValue0Struct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get teamWalletAddress(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get metadataURI(): string {
    return this[3].toString();
  }

  get createdAtTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get appAvailableForAllocationVoting(): boolean {
    return this[5].toBoolean();
  }
}

export class XAllocationVoting__getRoundResultValue0Struct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get voteStart(): BigInt {
    return this[1].toBigInt();
  }

  get voteDuration(): BigInt {
    return this[2].toBigInt();
  }
}

export class XAllocationVoting extends ethereum.SmartContract {
  static bind(address: Address): XAllocationVoting {
    return new XAllocationVoting("XAllocationVoting", address);
  }

  CLOCK_MODE(): string {
    let result = super.call("CLOCK_MODE", "CLOCK_MODE():(string)", []);

    return result[0].toString();
  }

  try_CLOCK_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("CLOCK_MODE", "CLOCK_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  CONTRACTS_ADDRESS_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "CONTRACTS_ADDRESS_MANAGER_ROLE",
      "CONTRACTS_ADDRESS_MANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CONTRACTS_ADDRESS_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACTS_ADDRESS_MANAGER_ROLE",
      "CONTRACTS_ADDRESS_MANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  COUNTING_MODE(): string {
    let result = super.call("COUNTING_MODE", "COUNTING_MODE():(string)", []);

    return result[0].toString();
  }

  try_COUNTING_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("COUNTING_MODE", "COUNTING_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GOVERNANCE_ROLE(): Bytes {
    let result = super.call(
      "GOVERNANCE_ROLE",
      "GOVERNANCE_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_GOVERNANCE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "GOVERNANCE_ROLE",
      "GOVERNANCE_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROUND_STARTER_ROLE(): Bytes {
    let result = super.call(
      "ROUND_STARTER_ROLE",
      "ROUND_STARTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_ROUND_STARTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROUND_STARTER_ROLE",
      "ROUND_STARTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  appSharesCap(): BigInt {
    let result = super.call("appSharesCap", "appSharesCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_appSharesCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("appSharesCap", "appSharesCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseAllocationPercentage(): BigInt {
    let result = super.call(
      "baseAllocationPercentage",
      "baseAllocationPercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_baseAllocationPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseAllocationPercentage",
      "baseAllocationPercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clock(): BigInt {
    let result = super.call("clock", "clock():(uint48)", []);

    return result[0].toBigInt();
  }

  try_clock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("clock", "clock():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRoundDeadline(): BigInt {
    let result = super.call(
      "currentRoundDeadline",
      "currentRoundDeadline():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentRoundDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRoundDeadline",
      "currentRoundDeadline():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRoundId(): BigInt {
    let result = super.call("currentRoundId", "currentRoundId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentRoundId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRoundId",
      "currentRoundId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRoundSnapshot(): BigInt {
    let result = super.call(
      "currentRoundSnapshot",
      "currentRoundSnapshot():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentRoundSnapshot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRoundSnapshot",
      "currentRoundSnapshot():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emissions(): Address {
    let result = super.call("emissions", "emissions():(address)", []);

    return result[0].toAddress();
  }

  try_emissions(): ethereum.CallResult<Address> {
    let result = super.tryCall("emissions", "emissions():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAppIdsOfRound(roundId: BigInt): Array<Bytes> {
    let result = super.call(
      "getAppIdsOfRound",
      "getAppIdsOfRound(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBytesArray();
  }

  try_getAppIdsOfRound(roundId: BigInt): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAppIdsOfRound",
      "getAppIdsOfRound(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAppVotes(roundId: BigInt, app: Bytes): BigInt {
    let result = super.call(
      "getAppVotes",
      "getAppVotes(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromFixedBytes(app),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAppVotes(roundId: BigInt, app: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAppVotes",
      "getAppVotes(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromFixedBytes(app),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAppVotesQF(roundId: BigInt, app: Bytes): BigInt {
    let result = super.call(
      "getAppVotesQF",
      "getAppVotesQF(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromFixedBytes(app),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAppVotesQF(roundId: BigInt, app: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAppVotesQF",
      "getAppVotesQF(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromFixedBytes(app),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAppsOfRound(
    roundId: BigInt,
  ): Array<XAllocationVoting__getAppsOfRoundResultValue0Struct> {
    let result = super.call(
      "getAppsOfRound",
      "getAppsOfRound(uint256):((bytes32,address,string,string,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toTupleArray<XAllocationVoting__getAppsOfRoundResultValue0Struct>();
  }

  try_getAppsOfRound(
    roundId: BigInt,
  ): ethereum.CallResult<
    Array<XAllocationVoting__getAppsOfRoundResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAppsOfRound",
      "getAppsOfRound(uint256):((bytes32,address,string,string,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<XAllocationVoting__getAppsOfRoundResultValue0Struct>(),
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRound(roundId: BigInt): XAllocationVoting__getRoundResultValue0Struct {
    let result = super.call(
      "getRound",
      "getRound(uint256):((address,uint48,uint32))",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return changetype<XAllocationVoting__getRoundResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRound(
    roundId: BigInt,
  ): ethereum.CallResult<XAllocationVoting__getRoundResultValue0Struct> {
    let result = super.tryCall(
      "getRound",
      "getRound(uint256):((address,uint48,uint32))",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<XAllocationVoting__getRoundResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getRoundAppSharesCap(roundId: BigInt): BigInt {
    let result = super.call(
      "getRoundAppSharesCap",
      "getRoundAppSharesCap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBigInt();
  }

  try_getRoundAppSharesCap(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoundAppSharesCap",
      "getRoundAppSharesCap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoundBaseAllocationPercentage(roundId: BigInt): BigInt {
    let result = super.call(
      "getRoundBaseAllocationPercentage",
      "getRoundBaseAllocationPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBigInt();
  }

  try_getRoundBaseAllocationPercentage(
    roundId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoundBaseAllocationPercentage",
      "getRoundBaseAllocationPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address, timepoint: BigInt): BigInt {
    let result = super.call("getVotes", "getVotes(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(timepoint),
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(
    account: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVoted(roundId: BigInt, user: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(roundId: BigInt, user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVotedOnce(user: Address): boolean {
    let result = super.call("hasVotedOnce", "hasVotedOnce(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_hasVotedOnce(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVotedOnce", "hasVotedOnce(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActive(roundId: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBoolean();
  }

  try_isActive(roundId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEligibleForVote(appId: Bytes, roundId: BigInt): boolean {
    let result = super.call(
      "isEligibleForVote",
      "isEligibleForVote(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(appId),
        ethereum.Value.fromUnsignedBigInt(roundId),
      ],
    );

    return result[0].toBoolean();
  }

  try_isEligibleForVote(
    appId: Bytes,
    roundId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligibleForVote",
      "isEligibleForVote(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(appId),
        ethereum.Value.fromUnsignedBigInt(roundId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFinalized(roundId: BigInt): boolean {
    let result = super.call("isFinalized", "isFinalized(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBoolean();
  }

  try_isFinalized(roundId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinalized", "isFinalized(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestSucceededRoundId(roundId: BigInt): BigInt {
    let result = super.call(
      "latestSucceededRoundId",
      "latestSucceededRoundId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBigInt();
  }

  try_latestSucceededRoundId(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestSucceededRoundId",
      "latestSucceededRoundId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  quorum(blockNumber: BigInt): BigInt {
    let result = super.call("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber),
    ]);

    return result[0].toBigInt();
  }

  try_quorum(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumDenominator(): BigInt {
    let result = super.call(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_quorumDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator(timepoint: BigInt): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator1(): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumReached(roundId: BigInt): boolean {
    let result = super.call("quorumReached", "quorumReached(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBoolean();
  }

  try_quorumReached(roundId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "quorumReached",
      "quorumReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roundDeadline(roundId: BigInt): BigInt {
    let result = super.call(
      "roundDeadline",
      "roundDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBigInt();
  }

  try_roundDeadline(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundDeadline",
      "roundDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundProposer(roundId: BigInt): Address {
    let result = super.call(
      "roundProposer",
      "roundProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toAddress();
  }

  try_roundProposer(roundId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "roundProposer",
      "roundProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundQuorum(roundId: BigInt): BigInt {
    let result = super.call("roundQuorum", "roundQuorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBigInt();
  }

  try_roundQuorum(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundQuorum",
      "roundQuorum(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundSnapshot(roundId: BigInt): BigInt {
    let result = super.call(
      "roundSnapshot",
      "roundSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );

    return result[0].toBigInt();
  }

  try_roundSnapshot(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundSnapshot",
      "roundSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startNewRound(): BigInt {
    let result = super.call("startNewRound", "startNewRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startNewRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startNewRound",
      "startNewRound():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(roundId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toI32();
  }

  try_state(roundId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalVoters(roundId: BigInt): BigInt {
    let result = super.call("totalVoters", "totalVoters(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBigInt();
  }

  try_totalVoters(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVoters",
      "totalVoters(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVotes(roundId: BigInt): BigInt {
    let result = super.call("totalVotes", "totalVotes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBigInt();
  }

  try_totalVotes(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVotes", "totalVotes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVotesQF(roundId: BigInt): BigInt {
    let result = super.call("totalVotesQF", "totalVotesQF(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(roundId),
    ]);

    return result[0].toBigInt();
  }

  try_totalVotesQF(roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVotesQF",
      "totalVotesQF(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  voterRewards(): Address {
    let result = super.call("voterRewards", "voterRewards():(address)", []);

    return result[0].toAddress();
  }

  try_voterRewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("voterRewards", "voterRewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingThreshold(): BigInt {
    let result = super.call(
      "votingThreshold",
      "votingThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_votingThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingThreshold",
      "votingThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  x2EarnApps(): Address {
    let result = super.call("x2EarnApps", "x2EarnApps():(address)", []);

    return result[0].toAddress();
  }

  try_x2EarnApps(): ethereum.CallResult<Address> {
    let result = super.tryCall("x2EarnApps", "x2EarnApps():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get appIds(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get voteWeights(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class FinalizeRoundCall extends ethereum.Call {
  get inputs(): FinalizeRoundCall__Inputs {
    return new FinalizeRoundCall__Inputs(this);
  }

  get outputs(): FinalizeRoundCall__Outputs {
    return new FinalizeRoundCall__Outputs(this);
  }
}

export class FinalizeRoundCall__Inputs {
  _call: FinalizeRoundCall;

  constructor(call: FinalizeRoundCall) {
    this._call = call;
  }

  get roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeRoundCall__Outputs {
  _call: FinalizeRoundCall;

  constructor(call: FinalizeRoundCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get data(): InitializeCallDataStruct {
    return changetype<InitializeCallDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallDataStruct extends ethereum.Tuple {
  get vot3Token(): Address {
    return this[0].toAddress();
  }

  get quorumPercentage(): BigInt {
    return this[1].toBigInt();
  }

  get initialVotingPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get timeLock(): Address {
    return this[3].toAddress();
  }

  get voterRewards(): Address {
    return this[4].toAddress();
  }

  get emissions(): Address {
    return this[5].toAddress();
  }

  get admins(): Array<Address> {
    return this[6].toAddressArray();
  }

  get upgrader(): Address {
    return this[7].toAddress();
  }

  get contractsAddressManager(): Address {
    return this[8].toAddress();
  }

  get x2EarnAppsAddress(): Address {
    return this[9].toAddress();
  }

  get baseAllocationPercentage(): BigInt {
    return this[10].toBigInt();
  }

  get appSharesCap(): BigInt {
    return this[11].toBigInt();
  }

  get votingThreshold(): BigInt {
    return this[12].toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAppSharesCapCall extends ethereum.Call {
  get inputs(): SetAppSharesCapCall__Inputs {
    return new SetAppSharesCapCall__Inputs(this);
  }

  get outputs(): SetAppSharesCapCall__Outputs {
    return new SetAppSharesCapCall__Outputs(this);
  }
}

export class SetAppSharesCapCall__Inputs {
  _call: SetAppSharesCapCall;

  constructor(call: SetAppSharesCapCall) {
    this._call = call;
  }

  get appSharesCap_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAppSharesCapCall__Outputs {
  _call: SetAppSharesCapCall;

  constructor(call: SetAppSharesCapCall) {
    this._call = call;
  }
}

export class SetBaseAllocationPercentageCall extends ethereum.Call {
  get inputs(): SetBaseAllocationPercentageCall__Inputs {
    return new SetBaseAllocationPercentageCall__Inputs(this);
  }

  get outputs(): SetBaseAllocationPercentageCall__Outputs {
    return new SetBaseAllocationPercentageCall__Outputs(this);
  }
}

export class SetBaseAllocationPercentageCall__Inputs {
  _call: SetBaseAllocationPercentageCall;

  constructor(call: SetBaseAllocationPercentageCall) {
    this._call = call;
  }

  get baseAllocationPercentage_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseAllocationPercentageCall__Outputs {
  _call: SetBaseAllocationPercentageCall;

  constructor(call: SetBaseAllocationPercentageCall) {
    this._call = call;
  }
}

export class SetEmissionsAddressCall extends ethereum.Call {
  get inputs(): SetEmissionsAddressCall__Inputs {
    return new SetEmissionsAddressCall__Inputs(this);
  }

  get outputs(): SetEmissionsAddressCall__Outputs {
    return new SetEmissionsAddressCall__Outputs(this);
  }
}

export class SetEmissionsAddressCall__Inputs {
  _call: SetEmissionsAddressCall;

  constructor(call: SetEmissionsAddressCall) {
    this._call = call;
  }

  get newEmissions(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmissionsAddressCall__Outputs {
  _call: SetEmissionsAddressCall;

  constructor(call: SetEmissionsAddressCall) {
    this._call = call;
  }
}

export class SetVoterRewardsAddressCall extends ethereum.Call {
  get inputs(): SetVoterRewardsAddressCall__Inputs {
    return new SetVoterRewardsAddressCall__Inputs(this);
  }

  get outputs(): SetVoterRewardsAddressCall__Outputs {
    return new SetVoterRewardsAddressCall__Outputs(this);
  }
}

export class SetVoterRewardsAddressCall__Inputs {
  _call: SetVoterRewardsAddressCall;

  constructor(call: SetVoterRewardsAddressCall) {
    this._call = call;
  }

  get newVoterRewards(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVoterRewardsAddressCall__Outputs {
  _call: SetVoterRewardsAddressCall;

  constructor(call: SetVoterRewardsAddressCall) {
    this._call = call;
  }
}

export class SetVotingPeriodCall extends ethereum.Call {
  get inputs(): SetVotingPeriodCall__Inputs {
    return new SetVotingPeriodCall__Inputs(this);
  }

  get outputs(): SetVotingPeriodCall__Outputs {
    return new SetVotingPeriodCall__Outputs(this);
  }
}

export class SetVotingPeriodCall__Inputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }

  get newVotingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingPeriodCall__Outputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }
}

export class SetVotingThresholdCall extends ethereum.Call {
  get inputs(): SetVotingThresholdCall__Inputs {
    return new SetVotingThresholdCall__Inputs(this);
  }

  get outputs(): SetVotingThresholdCall__Outputs {
    return new SetVotingThresholdCall__Outputs(this);
  }
}

export class SetVotingThresholdCall__Inputs {
  _call: SetVotingThresholdCall;

  constructor(call: SetVotingThresholdCall) {
    this._call = call;
  }

  get newVotingThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingThresholdCall__Outputs {
  _call: SetVotingThresholdCall;

  constructor(call: SetVotingThresholdCall) {
    this._call = call;
  }
}

export class SetX2EarnAppsAddressCall extends ethereum.Call {
  get inputs(): SetX2EarnAppsAddressCall__Inputs {
    return new SetX2EarnAppsAddressCall__Inputs(this);
  }

  get outputs(): SetX2EarnAppsAddressCall__Outputs {
    return new SetX2EarnAppsAddressCall__Outputs(this);
  }
}

export class SetX2EarnAppsAddressCall__Inputs {
  _call: SetX2EarnAppsAddressCall;

  constructor(call: SetX2EarnAppsAddressCall) {
    this._call = call;
  }

  get newX2EarnApps(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetX2EarnAppsAddressCall__Outputs {
  _call: SetX2EarnAppsAddressCall;

  constructor(call: SetX2EarnAppsAddressCall) {
    this._call = call;
  }
}

export class StartNewRoundCall extends ethereum.Call {
  get inputs(): StartNewRoundCall__Inputs {
    return new StartNewRoundCall__Inputs(this);
  }

  get outputs(): StartNewRoundCall__Outputs {
    return new StartNewRoundCall__Outputs(this);
  }
}

export class StartNewRoundCall__Inputs {
  _call: StartNewRoundCall;

  constructor(call: StartNewRoundCall) {
    this._call = call;
  }
}

export class StartNewRoundCall__Outputs {
  _call: StartNewRoundCall;

  constructor(call: StartNewRoundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateQuorumNumeratorCall extends ethereum.Call {
  get inputs(): UpdateQuorumNumeratorCall__Inputs {
    return new UpdateQuorumNumeratorCall__Inputs(this);
  }

  get outputs(): UpdateQuorumNumeratorCall__Outputs {
    return new UpdateQuorumNumeratorCall__Outputs(this);
  }
}

export class UpdateQuorumNumeratorCall__Inputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }

  get newQuorumNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateQuorumNumeratorCall__Outputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
