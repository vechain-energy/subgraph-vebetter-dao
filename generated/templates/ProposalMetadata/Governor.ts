// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FunctionWhitelisted extends ethereum.Event {
  get params(): FunctionWhitelisted__Params {
    return new FunctionWhitelisted__Params(this);
  }
}

export class FunctionWhitelisted__Params {
  _event: FunctionWhitelisted;

  constructor(event: FunctionWhitelisted) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get functionSelector(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get isWhitelisted(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get signatures(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[5].value.toBytesArray();
  }

  get description(): string {
    return this._event.parameters[6].value.toString();
  }

  get roundIdVoteStart(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get depositThreshold(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class ProposalDeposit extends ethereum.Event {
  get params(): ProposalDeposit__Params {
    return new ProposalDeposit__Params(this);
  }
}

export class ProposalDeposit__Params {
  _event: ProposalDeposit;

  constructor(event: ProposalDeposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalQueued extends ethereum.Event {
  get params(): ProposalQueued__Params {
    return new ProposalQueued__Params(this);
  }
}

export class ProposalQueued__Params {
  _event: ProposalQueued;

  constructor(event: ProposalQueued) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get etaSeconds(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class QuorumNumeratorUpdated extends ethereum.Event {
  get params(): QuorumNumeratorUpdated__Params {
    return new QuorumNumeratorUpdated__Params(this);
  }
}

export class QuorumNumeratorUpdated__Params {
  _event: QuorumNumeratorUpdated;

  constructor(event: QuorumNumeratorUpdated) {
    this._event = event;
  }

  get oldNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TimelockChange extends ethereum.Event {
  get params(): TimelockChange__Params {
    return new TimelockChange__Params(this);
  }
}

export class TimelockChange__Params {
  _event: TimelockChange;

  constructor(event: TimelockChange) {
    this._event = event;
  }

  get oldTimelock(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTimelock(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get power(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class DepositThresholdSet extends ethereum.Event {
  get params(): DepositThresholdSet__Params {
    return new DepositThresholdSet__Params(this);
  }
}

export class DepositThresholdSet__Params {
  _event: DepositThresholdSet;

  constructor(event: DepositThresholdSet) {
    this._event = event;
  }

  get oldDepositThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDepositThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Governor__proposalVotesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAgainstVotes(): BigInt {
    return this.value0;
  }

  getForVotes(): BigInt {
    return this.value1;
  }

  getAbstainVotes(): BigInt {
    return this.value2;
  }
}

export class Governor extends ethereum.SmartContract {
  static bind(address: Address): Governor {
    return new Governor("Governor", address);
  }

  CLOCK_MODE(): string {
    let result = super.call("CLOCK_MODE", "CLOCK_MODE():(string)", []);

    return result[0].toString();
  }

  try_CLOCK_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("CLOCK_MODE", "CLOCK_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  CONTRACTS_ADDRESS_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "CONTRACTS_ADDRESS_MANAGER_ROLE",
      "CONTRACTS_ADDRESS_MANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CONTRACTS_ADDRESS_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACTS_ADDRESS_MANAGER_ROLE",
      "CONTRACTS_ADDRESS_MANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  COUNTING_MODE(): string {
    let result = super.call("COUNTING_MODE", "COUNTING_MODE():(string)", []);

    return result[0].toString();
  }

  try_COUNTING_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("COUNTING_MODE", "COUNTING_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GOVERNOR_FUNCTIONS_SETTINGS_ROLE(): Bytes {
    let result = super.call(
      "GOVERNOR_FUNCTIONS_SETTINGS_ROLE",
      "GOVERNOR_FUNCTIONS_SETTINGS_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_GOVERNOR_FUNCTIONS_SETTINGS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "GOVERNOR_FUNCTIONS_SETTINGS_ROLE",
      "GOVERNOR_FUNCTIONS_SETTINGS_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROPOSAL_EXECUTOR_ROLE(): Bytes {
    let result = super.call(
      "PROPOSAL_EXECUTOR_ROLE",
      "PROPOSAL_EXECUTOR_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PROPOSAL_EXECUTOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROPOSAL_EXECUTOR_ROLE",
      "PROPOSAL_EXECUTOR_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  b3tr(): Address {
    let result = super.call("b3tr", "b3tr():(address)", []);

    return result[0].toAddress();
  }

  try_b3tr(): ethereum.CallResult<Address> {
    let result = super.tryCall("b3tr", "b3tr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canProposalStartInNextRound(): boolean {
    let result = super.call(
      "canProposalStartInNextRound",
      "canProposalStartInNextRound():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_canProposalStartInNextRound(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canProposalStartInNextRound",
      "canProposalStartInNextRound():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancel(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): BigInt {
    let result = super.call(
      "cancel",
      "cancel(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );

    return result[0].toBigInt();
  }

  try_cancel(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancel",
      "cancel(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVote(proposalId: BigInt, support: i32): BigInt {
    let result = super.call("castVote", "castVote(uint256,uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
    ]);

    return result[0].toBigInt();
  }

  try_castVote(proposalId: BigInt, support: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVote",
      "castVote(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReason(proposalId: BigInt, support: i32, reason: string): BigInt {
    let result = super.call(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
      ],
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReason(
    proposalId: BigInt,
    support: i32,
    reason: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clock(): BigInt {
    let result = super.call("clock", "clock():(uint48)", []);

    return result[0].toBigInt();
  }

  try_clock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("clock", "clock():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositThreshold(): BigInt {
    let result = super.call(
      "depositThreshold",
      "depositThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_depositThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositThreshold",
      "depositThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositThresholdPercentage(): BigInt {
    let result = super.call(
      "depositThresholdPercentage",
      "depositThresholdPercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_depositThresholdPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositThresholdPercentage",
      "depositThresholdPercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalDeposits(proposalId: BigInt): BigInt {
    let result = super.call(
      "getProposalDeposits",
      "getProposalDeposits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_getProposalDeposits(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalDeposits",
      "getProposalDeposits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getQuadraticVotingPower(account: Address, timepoint: BigInt): BigInt {
    let result = super.call(
      "getQuadraticVotingPower",
      "getQuadraticVotingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );

    return result[0].toBigInt();
  }

  try_getQuadraticVotingPower(
    account: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuadraticVotingPower",
      "getQuadraticVotingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTimelockId(proposalId: BigInt): Bytes {
    let result = super.call(
      "getTimelockId",
      "getTimelockId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBytes();
  }

  try_getTimelockId(proposalId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTimelockId",
      "getTimelockId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUserDeposit(proposalId: BigInt, user: Address): BigInt {
    let result = super.call(
      "getUserDeposit",
      "getUserDeposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserDeposit(
    proposalId: BigInt,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserDeposit",
      "getUserDeposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address, timepoint: BigInt): BigInt {
    let result = super.call("getVotes", "getVotes(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(timepoint),
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(
    account: Address,
    timepoint: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVoted(proposalId: BigInt, account: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(
    proposalId: BigInt,
    account: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVotedOnce(user: Address): boolean {
    let result = super.call("hasVotedOnce", "hasVotedOnce(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_hasVotedOnce(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVotedOnce", "hasVotedOnce(address):(bool)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): BigInt {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );

    return result[0].toBigInt();
  }

  try_hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isFunctionWhitelisted(target: Address, functionSelector: Bytes): boolean {
    let result = super.call(
      "isFunctionWhitelisted",
      "isFunctionWhitelisted(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromFixedBytes(functionSelector),
      ],
    );

    return result[0].toBoolean();
  }

  try_isFunctionWhitelisted(
    target: Address,
    functionSelector: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFunctionWhitelisted",
      "isFunctionWhitelisted(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromFixedBytes(functionSelector),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minVotingDelay(): BigInt {
    let result = super.call("minVotingDelay", "minVotingDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minVotingDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minVotingDelay",
      "minVotingDelay():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalDeadline(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_proposalDeadline(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalDepositReached(proposalId: BigInt): boolean {
    let result = super.call(
      "proposalDepositReached",
      "proposalDepositReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBoolean();
  }

  try_proposalDepositReached(proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proposalDepositReached",
      "proposalDepositReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalDepositThreshold(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalDepositThreshold",
      "proposalDepositThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_proposalDepositThreshold(
    proposalId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDepositThreshold",
      "proposalDepositThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalEta(proposalId: BigInt): BigInt {
    let result = super.call("proposalEta", "proposalEta(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
    ]);

    return result[0].toBigInt();
  }

  try_proposalEta(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalEta",
      "proposalEta(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalNeedsQueuing(proposalId: BigInt): boolean {
    let result = super.call(
      "proposalNeedsQueuing",
      "proposalNeedsQueuing(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBoolean();
  }

  try_proposalNeedsQueuing(proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proposalNeedsQueuing",
      "proposalNeedsQueuing(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalProposer(proposalId: BigInt): Address {
    let result = super.call(
      "proposalProposer",
      "proposalProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toAddress();
  }

  try_proposalProposer(proposalId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposalProposer",
      "proposalProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalSnapshot(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_proposalSnapshot(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalStartRound(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalStartRound",
      "proposalStartRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_proposalStartRound(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalStartRound",
      "proposalStartRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalTotalVotes(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalTotalVotes",
      "proposalTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return result[0].toBigInt();
  }

  try_proposalTotalVotes(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalTotalVotes",
      "proposalTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotes(proposalId: BigInt): Governor__proposalVotesResult {
    let result = super.call(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );

    return new Governor__proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_proposalVotes(
    proposalId: BigInt,
  ): ethereum.CallResult<Governor__proposalVotesResult> {
    let result = super.tryCall(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Governor__proposalVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    description: string,
    startRoundId: BigInt,
    depositAmount: BigInt,
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[],string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(startRoundId),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    description: string,
    startRoundId: BigInt,
    depositAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[],string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(startRoundId),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queue(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): BigInt {
    let result = super.call(
      "queue",
      "queue(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );

    return result[0].toBigInt();
  }

  try_queue(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "queue",
      "queue(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorum(blockNumber: BigInt): BigInt {
    let result = super.call("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber),
    ]);

    return result[0].toBigInt();
  }

  try_quorum(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumDenominator(): BigInt {
    let result = super.call(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_quorumDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator(timepoint: BigInt): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator1(): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumReached(proposalId: BigInt): boolean {
    let result = super.call("quorumReached", "quorumReached(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
    ]);

    return result[0].toBoolean();
  }

  try_quorumReached(proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "quorumReached",
      "quorumReached(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  timelock(): Address {
    let result = super.call("timelock", "timelock():(address)", []);

    return result[0].toAddress();
  }

  try_timelock(): ethereum.CallResult<Address> {
    let result = super.tryCall("timelock", "timelock():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timelockSalt(descriptionHash: Bytes): Bytes {
    let result = super.call("timelockSalt", "timelockSalt(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(descriptionHash),
    ]);

    return result[0].toBytes();
  }

  try_timelockSalt(descriptionHash: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "timelockSalt",
      "timelockSalt(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(descriptionHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  voterRewards(): Address {
    let result = super.call("voterRewards", "voterRewards():(address)", []);

    return result[0].toAddress();
  }

  try_voterRewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("voterRewards", "voterRewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingThreshold(): BigInt {
    let result = super.call(
      "votingThreshold",
      "votingThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_votingThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingThreshold",
      "votingThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xAllocationVoting(): Address {
    let result = super.call(
      "xAllocationVoting",
      "xAllocationVoting():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_xAllocationVoting(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xAllocationVoting",
      "xAllocationVoting():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonCall__Inputs {
    return new CastVoteWithReasonCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonCall__Outputs {
    return new CastVoteWithReasonCall__Outputs(this);
  }
}

export class CastVoteWithReasonCall__Inputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteWithReasonCall__Outputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get data(): InitializeCallDataStruct {
    return changetype<InitializeCallDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get rolesData(): InitializeCallRolesDataStruct {
    return changetype<InitializeCallRolesDataStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallDataStruct extends ethereum.Tuple {
  get vot3Token(): Address {
    return this[0].toAddress();
  }

  get timelock(): Address {
    return this[1].toAddress();
  }

  get xAllocationVoting(): Address {
    return this[2].toAddress();
  }

  get b3tr(): Address {
    return this[3].toAddress();
  }

  get quorumPercentage(): BigInt {
    return this[4].toBigInt();
  }

  get initialDepositThreshold(): BigInt {
    return this[5].toBigInt();
  }

  get initialMinVotingDelay(): BigInt {
    return this[6].toBigInt();
  }

  get initialVotingThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get voterRewards(): Address {
    return this[8].toAddress();
  }

  get isFunctionRestrictionEnabled(): boolean {
    return this[9].toBoolean();
  }
}

export class InitializeCallRolesDataStruct extends ethereum.Tuple {
  get governorAdmin(): Address {
    return this[0].toAddress();
  }

  get pauser(): Address {
    return this[1].toAddress();
  }

  get contractsAddressManager(): Address {
    return this[2].toAddress();
  }

  get proposalExecutor(): Address {
    return this[3].toAddress();
  }

  get governorFunctionSettingsRoleAddress(): Address {
    return this[4].toAddress();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get startRoundId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class QueueCall extends ethereum.Call {
  get inputs(): QueueCall__Inputs {
    return new QueueCall__Inputs(this);
  }

  get outputs(): QueueCall__Outputs {
    return new QueueCall__Outputs(this);
  }
}

export class QueueCall__Inputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class QueueCall__Outputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RelayCall extends ethereum.Call {
  get inputs(): RelayCall__Inputs {
    return new RelayCall__Inputs(this);
  }

  get outputs(): RelayCall__Outputs {
    return new RelayCall__Outputs(this);
  }
}

export class RelayCall__Inputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RelayCall__Outputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetDepositThresholdPercentageCall extends ethereum.Call {
  get inputs(): SetDepositThresholdPercentageCall__Inputs {
    return new SetDepositThresholdPercentageCall__Inputs(this);
  }

  get outputs(): SetDepositThresholdPercentageCall__Outputs {
    return new SetDepositThresholdPercentageCall__Outputs(this);
  }
}

export class SetDepositThresholdPercentageCall__Inputs {
  _call: SetDepositThresholdPercentageCall;

  constructor(call: SetDepositThresholdPercentageCall) {
    this._call = call;
  }

  get newDepositThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositThresholdPercentageCall__Outputs {
  _call: SetDepositThresholdPercentageCall;

  constructor(call: SetDepositThresholdPercentageCall) {
    this._call = call;
  }
}

export class SetIsFunctionRestrictionEnabledCall extends ethereum.Call {
  get inputs(): SetIsFunctionRestrictionEnabledCall__Inputs {
    return new SetIsFunctionRestrictionEnabledCall__Inputs(this);
  }

  get outputs(): SetIsFunctionRestrictionEnabledCall__Outputs {
    return new SetIsFunctionRestrictionEnabledCall__Outputs(this);
  }
}

export class SetIsFunctionRestrictionEnabledCall__Inputs {
  _call: SetIsFunctionRestrictionEnabledCall;

  constructor(call: SetIsFunctionRestrictionEnabledCall) {
    this._call = call;
  }

  get isEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsFunctionRestrictionEnabledCall__Outputs {
  _call: SetIsFunctionRestrictionEnabledCall;

  constructor(call: SetIsFunctionRestrictionEnabledCall) {
    this._call = call;
  }
}

export class SetMinVotingDelayCall extends ethereum.Call {
  get inputs(): SetMinVotingDelayCall__Inputs {
    return new SetMinVotingDelayCall__Inputs(this);
  }

  get outputs(): SetMinVotingDelayCall__Outputs {
    return new SetMinVotingDelayCall__Outputs(this);
  }
}

export class SetMinVotingDelayCall__Inputs {
  _call: SetMinVotingDelayCall;

  constructor(call: SetMinVotingDelayCall) {
    this._call = call;
  }

  get newMinVotingDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinVotingDelayCall__Outputs {
  _call: SetMinVotingDelayCall;

  constructor(call: SetMinVotingDelayCall) {
    this._call = call;
  }
}

export class SetVoterRewardsCall extends ethereum.Call {
  get inputs(): SetVoterRewardsCall__Inputs {
    return new SetVoterRewardsCall__Inputs(this);
  }

  get outputs(): SetVoterRewardsCall__Outputs {
    return new SetVoterRewardsCall__Outputs(this);
  }
}

export class SetVoterRewardsCall__Inputs {
  _call: SetVoterRewardsCall;

  constructor(call: SetVoterRewardsCall) {
    this._call = call;
  }

  get newVoterRewards(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVoterRewardsCall__Outputs {
  _call: SetVoterRewardsCall;

  constructor(call: SetVoterRewardsCall) {
    this._call = call;
  }
}

export class SetVotingThresholdCall extends ethereum.Call {
  get inputs(): SetVotingThresholdCall__Inputs {
    return new SetVotingThresholdCall__Inputs(this);
  }

  get outputs(): SetVotingThresholdCall__Outputs {
    return new SetVotingThresholdCall__Outputs(this);
  }
}

export class SetVotingThresholdCall__Inputs {
  _call: SetVotingThresholdCall;

  constructor(call: SetVotingThresholdCall) {
    this._call = call;
  }

  get newVotingThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingThresholdCall__Outputs {
  _call: SetVotingThresholdCall;

  constructor(call: SetVotingThresholdCall) {
    this._call = call;
  }
}

export class SetWhitelistFunctionCall extends ethereum.Call {
  get inputs(): SetWhitelistFunctionCall__Inputs {
    return new SetWhitelistFunctionCall__Inputs(this);
  }

  get outputs(): SetWhitelistFunctionCall__Outputs {
    return new SetWhitelistFunctionCall__Outputs(this);
  }
}

export class SetWhitelistFunctionCall__Inputs {
  _call: SetWhitelistFunctionCall;

  constructor(call: SetWhitelistFunctionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSelector(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get isWhitelisted(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetWhitelistFunctionCall__Outputs {
  _call: SetWhitelistFunctionCall;

  constructor(call: SetWhitelistFunctionCall) {
    this._call = call;
  }
}

export class SetWhitelistFunctionsCall extends ethereum.Call {
  get inputs(): SetWhitelistFunctionsCall__Inputs {
    return new SetWhitelistFunctionsCall__Inputs(this);
  }

  get outputs(): SetWhitelistFunctionsCall__Outputs {
    return new SetWhitelistFunctionsCall__Outputs(this);
  }
}

export class SetWhitelistFunctionsCall__Inputs {
  _call: SetWhitelistFunctionsCall;

  constructor(call: SetWhitelistFunctionsCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get isWhitelisted(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetWhitelistFunctionsCall__Outputs {
  _call: SetWhitelistFunctionsCall;

  constructor(call: SetWhitelistFunctionsCall) {
    this._call = call;
  }
}

export class SetXAllocationVotingCall extends ethereum.Call {
  get inputs(): SetXAllocationVotingCall__Inputs {
    return new SetXAllocationVotingCall__Inputs(this);
  }

  get outputs(): SetXAllocationVotingCall__Outputs {
    return new SetXAllocationVotingCall__Outputs(this);
  }
}

export class SetXAllocationVotingCall__Inputs {
  _call: SetXAllocationVotingCall;

  constructor(call: SetXAllocationVotingCall) {
    this._call = call;
  }

  get newXAllocationVoting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetXAllocationVotingCall__Outputs {
  _call: SetXAllocationVotingCall;

  constructor(call: SetXAllocationVotingCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateQuorumNumeratorCall extends ethereum.Call {
  get inputs(): UpdateQuorumNumeratorCall__Inputs {
    return new UpdateQuorumNumeratorCall__Inputs(this);
  }

  get outputs(): UpdateQuorumNumeratorCall__Outputs {
    return new UpdateQuorumNumeratorCall__Outputs(this);
  }
}

export class UpdateQuorumNumeratorCall__Inputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }

  get newQuorumNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateQuorumNumeratorCall__Outputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }
}

export class UpdateTimelockCall extends ethereum.Call {
  get inputs(): UpdateTimelockCall__Inputs {
    return new UpdateTimelockCall__Inputs(this);
  }

  get outputs(): UpdateTimelockCall__Outputs {
    return new UpdateTimelockCall__Outputs(this);
  }
}

export class UpdateTimelockCall__Inputs {
  _call: UpdateTimelockCall;

  constructor(call: UpdateTimelockCall) {
    this._call = call;
  }

  get newTimelock(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTimelockCall__Outputs {
  _call: UpdateTimelockCall;

  constructor(call: UpdateTimelockCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
