// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ResolveUtils extends ethereum.SmartContract {
  static bind(address: Address): ResolveUtils {
    return new ResolveUtils("ResolveUtils", address);
  }

  getAddresses(names: Array<string>): Array<Address> {
    let result = super.call(
      "getAddresses",
      "getAddresses(string[]):(address[])",
      [ethereum.Value.fromStringArray(names)],
    );

    return result[0].toAddressArray();
  }

  try_getAddresses(names: Array<string>): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAddresses",
      "getAddresses(string[]):(address[])",
      [ethereum.Value.fromStringArray(names)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getNames(addresses: Array<Address>): Array<string> {
    let result = super.call("getNames", "getNames(address[]):(string[])", [
      ethereum.Value.fromAddressArray(addresses),
    ]);

    return result[0].toStringArray();
  }

  try_getNames(addresses: Array<Address>): ethereum.CallResult<Array<string>> {
    let result = super.tryCall("getNames", "getNames(address[]):(string[])", [
      ethereum.Value.fromAddressArray(addresses),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }
}
